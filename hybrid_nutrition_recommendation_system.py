# -*- coding: utf-8 -*-
"""Hybrid_Nutrition_Recommendation_System.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18g6RBDlC9V3DsxLAzvLAsc_8VDIfXiV_
"""

import pandas as pd
import matplotlib.pyplot as plt
from tabulate import tabulate

# Load the CSV file containing dietary recommendations
df = pd.read_csv('/content/sample_data/intelligent_health_meal.csv')

def calculate_bmi(weight, height):
    """Calculate BMI and determine health status."""
    bmi = weight / ((height / 100) ** 2)
    if bmi < 18.5:
        status = 'Underweight'
    elif bmi < 24.9:
        status = 'Normal'
    elif bmi < 29.9:
        status = 'Overweight'
    else:
        status = 'Obese'

    return round(bmi, 2), status

def visualize_bmi_distribution(user_weight, user_height, user_bmi, user_status):
    """Visualizes BMI distribution with pie chart and bar plot."""
    sample_weights = [60, 72, 85, 45, 90, 70, 95, 80, 68, 100, 59, 74, 66, 88, 110,
                      50, 52, 63, 76, 92, 104, 49, 67, 73, 82, 91, 108, 57, 65, 99]
    sample_heights = [165, 170, 175, 160, 180, 168, 172, 178, 167, 185, 164, 171, 169, 177, 190,
                      158, 159, 166, 173, 179, 183, 157, 165, 170, 176, 181, 186, 162, 168, 182]

    bmi_categories = {'Underweight': 0, 'Normal': 0, 'Overweight': 0, 'Obese': 0}
    for w, h in zip(sample_weights, sample_heights):
        bmi, status = calculate_bmi(w, h)
        bmi_categories[status] += 1

    fig, axes = plt.subplots(1, 2, figsize=(14, 6))

    # Pie Chart
    axes[0].pie(bmi_categories.values(), labels=bmi_categories.keys(), autopct='%1.1f%%', startangle=140, colors=['skyblue', 'lightgreen', 'orange', 'lightcoral'])
    axes[0].set_title('BMI Category Distribution - Pie Chart')
    axes[0].axis('equal')

    # Bar Graph
    category_list = list(bmi_categories.keys())
    counts = list(bmi_categories.values())
    x_pos = range(len(category_list))
    axes[1].bar(x_pos, counts, color=['skyblue', 'lightgreen', 'orange', 'lightcoral'])
    axes[1].set_xticks(x_pos)
    axes[1].set_xticklabels(category_list)
    axes[1].set_title('BMI Category Distribution - Bar Graph')
    axes[1].set_xlabel('BMI Category')
    axes[1].set_ylabel('Number of People')
    axes[1].grid(axis='y', linestyle='--', alpha=0.7)
    axes[1].set_ylim(0, max(counts) + 5)
    axes[1].axvline(x=category_list.index(user_status), color='blue', linestyle='--', linewidth=2, label=f'Your BMI: {user_bmi}')

    plt.suptitle("BMI Distribution Analysis", fontsize=16)
    plt.tight_layout(rect=[0, 0.03, 1, 0.95])
    plt.legend()
    plt.show()

def bmi_calculator():
    """Calculate BMI, provide health status, and show BMI distribution."""
    print("\n--- BMI Calculator and Distribution ---")
    try:
        weight = float(input("Enter your weight in kg: "))
        height = float(input("Enter your height in cm: "))
    except ValueError:
        print("Invalid input. Please enter numerical values for weight and height.")
        return

    bmi_value, health_status = calculate_bmi(weight, height)
    print(f"\nYour BMI is: {bmi_value}")
    print(f"Health Status: {health_status}")

    visualize_bmi_distribution(weight, height, bmi_value, health_status)

def dietary_advice(weight, height, diseases, medications, allergies, dietary_restrictions, max_calories):
    """Provide dietary advice based on user's health data."""
    bmi_value, health_status = calculate_bmi(weight, height)

    recommendations = df.copy()

    dietary_restrictions = dietary_restrictions.strip().lower()
    diseases = [d.strip().lower() for d in diseases]
    allergies = [a.strip().lower() for a in allergies]

    recommendations = recommendations[
        (recommendations['Calories'] <= max_calories) &
        (recommendations['Diet'].str.lower() == dietary_restrictions) &
        (~recommendations['Allergies'].str.lower().isin(allergies)) &
        (recommendations['Diseases'].str.lower().str.contains('|'.join(diseases), case=False, na=False) if diseases else True)
    ]

    if recommendations.empty:
        recommendations = df[
            (df['Calories'] <= max_calories) &
            (df['Diet'].str.lower().str.contains(dietary_restrictions, case=False, na=False)) &
            (~df['Allergies'].str.lower().isin(allergies))
        ]

    if not recommendations.empty:
        return recommendations.sort_values(
            by=['Protein', 'Calories'],
            ascending=[False, True]
        ).head(5)

    return df.sort_values('Calories').head(5)

def personalised_meal_plan():
    """Provide personalised meal recommendations."""
    print("\n--- Personalised Meal Plan ---")

    try:
        weight = float(input("Enter your weight in kg: "))
        height = float(input("Enter your height in cm: "))

        diseases_input = input("Enter any diseases (comma-separated): ").strip()
        diseases = [d.strip() for d in diseases_input.split(',') if d.strip()]

        medications_input = input("Enter any medications (comma-separated): ").strip()
        medications = [m.strip() for m in medications_input.split(',') if m.strip()]

        allergies_input = input("Enter any allergies (comma-separated): ").strip()
        allergies = [a.strip() for a in allergies_input.split(',') if a.strip()]

        dietary_restrictions = input("Enter your dietary restrictions (e.g., Vegetarian, Vegan, Non Vegetarian): ").strip()

        max_calories_input = input("Enter your maximum calories intake: ").strip()
        max_calories = float(max_calories_input) if max_calories_input else float('inf')

        recommendations = dietary_advice(weight, height, diseases, medications, allergies, dietary_restrictions, max_calories)

        if not recommendations.empty:
            print("\nHere are your personalized food recommendations:")
            print(tabulate(recommendations[['Food Recommendations', 'Calories', 'Protein', 'Carbs', 'Fats']], headers='keys', tablefmt='pretty', showindex=False))
        else:
            print("\nNo dietary recommendations available based on your inputs.")

    except ValueError as e:
        print(f"Invalid input. Please try again. Error: {e}")

def main():
    """Main function to run the Nutrition Recommendation System."""
    print("Welcome to the Nutrition Recommendation System!")

    while True:
        print("\nWhat would you like to do?")
        print("1. Calculate my BMI (and view BMI distribution)")
        print("2. Get a personalised meal plan")
        print("3. Exit")

        choice = input("Enter your choice (1, 2, or 3): ").strip()

        if choice == '1':
            bmi_calculator()
        elif choice == '2':
            personalised_meal_plan()
        elif choice == '3':
            print("Thank you for using the Nutrition Recommendation System. Goodbye!")
            break
        else:
            print("Invalid choice. Please enter 1, 2, or 3.")

if __name__ == "__main__":
    main()